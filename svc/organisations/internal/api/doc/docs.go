// Package doc Code generated by swaggo/swag. DO NOT EDIT
package doc

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "url": "https://github.com/adamkirk/stayaway",
            "email": "adamkirk@example.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1/_probes/startup": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Probes"
                ],
                "summary": "Check is the app is listening",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "502": {
                        "description": "Bad Gateway"
                    },
                    "504": {
                        "description": "Gateway Timeout"
                    }
                }
            }
        },
        "/v1/municipalities": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Municipalities"
                ],
                "summary": "List all municipalities that can be used",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Countries to filter the municipalities by.\nCurrently we only support United Kingdom anyway.",
                        "name": "country",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "name"
                        ],
                        "type": "string",
                        "description": "The field by which to order the results.",
                        "name": "order_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "The direction to order the results by.",
                        "name": "order_dir",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "The page to display.\nAn empty list may be returned if going beyond the last page of results.",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "description": "The amount of results to display per page.",
                        "name": "per_page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Characters to use as a prefix in searching by the name.\nUseful for a \"typeahead\" widget.",
                        "name": "prefix",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.ListMunicipalities"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Invalid"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    }
                }
            }
        },
        "/v1/organisations": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organisations"
                ],
                "summary": "List all organisations",
                "parameters": [
                    {
                        "enum": [
                            "name",
                            "slug"
                        ],
                        "type": "string",
                        "description": "The field by which to order the results.",
                        "name": "order_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "The direction to order the results by.",
                        "name": "order_dir",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "The page to display.\nAn empty list may be returned if going beyond the last page of results.",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "description": "The amount of results to display per page.",
                        "name": "per_page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.ListOrganisations"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Invalid"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organisations"
                ],
                "summary": "Create an organisation",
                "parameters": [
                    {
                        "description": "Organisation definition",
                        "name": "Organisation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/V1.Request.CreateOrganisation"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.CreateOrganisation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Invalid"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    }
                }
            }
        },
        "/v1/organisations/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organisations"
                ],
                "summary": "Get an organisation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The Organisation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.GetOrganisation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Invalid"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organisations"
                ],
                "summary": "Delete an organisation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The Organisation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Invalid"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organisations"
                ],
                "summary": "Update an organisation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The Organisation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Organisation definition",
                        "name": "Changes",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/V1.Request.UpdateOrganisation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.PatchOrganisation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Invalid"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    }
                }
            }
        },
        "/v1/organisations/{orgId}/venues": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Venues"
                ],
                "summary": "List all venues for an organisation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The Organisations ID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "order_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "order_dir",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "per_page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.ListVenues"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Invalid"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Venues"
                ],
                "summary": "Create a venue for an organisation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The Organisations ID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Venue definition",
                        "name": "Venue",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/V1.Request.CreateVenue"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.PostVenue"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Invalid"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    }
                }
            }
        },
        "/v1/organisations/{orgId}/venues/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Venues"
                ],
                "summary": "Get a venue for an organisation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The Organisations ID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The Venues ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.PostVenue"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Invalid"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Venues"
                ],
                "summary": "Delete a venue from an organisation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The Organisations ID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The Venues ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Invalid"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Venues"
                ],
                "summary": "Update a venue for an organisation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The Organisations ID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The Venues ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Venue changes",
                        "name": "Changes",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/V1.Request.UpdateVenue"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.PatchVenue"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Invalid"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    }
                }
            }
        },
        "/v1/organisations/{orgId}/venues/{venueId}/accommodation-templates": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AccommodationTemplates"
                ],
                "summary": "List all accommodation templates for a venue",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The Organisations ID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The Venues ID",
                        "name": "venueId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "name"
                        ],
                        "type": "string",
                        "description": "The field by which to order the results.",
                        "name": "order_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "The direction to order the results by.",
                        "name": "order_dir",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "The page to display.\nAn empty list may be returned if going beyond the last page of results.",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "description": "The amount of results to display per page.",
                        "name": "per_page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Characters to use as a prefix in searching by the name.\nUseful for a \"typeahead\" widget.",
                        "name": "prefix",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.ListVenueAccommodationTemplates"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Invalid"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AccommodationTemplates"
                ],
                "summary": "Create a venue accommodation template for an organisation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The Organisations ID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The Venues ID",
                        "name": "venueId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Venue Accommodation Template definition",
                        "name": "VenueAccommodationTemplate",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/V1.Request.CreateAccommodationVenueTemplate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.PostVenueAccommodationTemplate"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Invalid"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    }
                }
            }
        },
        "/v1/organisations/{orgId}/venues/{venueId}/accommodation-templates/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AccommodationTemplates"
                ],
                "summary": "Get a venue accommodation template",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The Organisations ID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The Venues ID",
                        "name": "venueId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The ID of the template",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.GetVenueAccommodationTemplate"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Invalid"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AccommodationTemplates"
                ],
                "summary": "Delete a venue accommodation template",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The Organisations ID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The Venues ID",
                        "name": "venueId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The template ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Invalid"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AccommodationTemplates"
                ],
                "summary": "Update a venue accommodation template",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The Organisations ID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The Venues ID",
                        "name": "venueId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The ID of the template",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Venue changes",
                        "name": "Changes",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/V1.Request.UpdateAccommodationVenueTemplate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.PatchVenueAccommodationTemplate"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Invalid"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    }
                }
            }
        },
        "/v1/organisations/{orgId}/venues/{venueId}/accommodations": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accommodations"
                ],
                "summary": "List all accommodations for a venue",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The Organisations ID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The Venues ID",
                        "name": "venueId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "name"
                        ],
                        "type": "string",
                        "description": "The field by which to order the results.",
                        "name": "order_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "The direction to order the results by.",
                        "name": "order_dir",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "The page to display.\nAn empty list may be returned if going beyond the last page of results.",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "description": "The amount of results to display per page.",
                        "name": "per_page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Characters to use as a prefix in searching by the name.\nUseful for a \"typeahead\" widget.",
                        "name": "prefix",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "venue_template_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.ListVenueAccommodations"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Invalid"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accommodations"
                ],
                "summary": "Create an accommodation for a venue",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The Organisations ID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The Venues ID",
                        "name": "venueId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Venue Accommodation definition",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/V1.Request.CreateVenueAccommodation"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.PostVenueAccommodation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Invalid"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    }
                }
            }
        },
        "/v1/organisations/{orgId}/venues/{venueId}/accommodations/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accommodations"
                ],
                "summary": "Get a venue accommodation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The Organisations ID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The Venues ID",
                        "name": "venueId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The ID of the accommodation",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.GetVenueAccommodation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Invalid"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accommodations"
                ],
                "summary": "Delete a venue accommodation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The Organisations ID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The Venues ID",
                        "name": "venueId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The accommodation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Invalid"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accommodations"
                ],
                "summary": "Update a venue accommodation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The Organisations ID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The Venues ID",
                        "name": "venueId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The ID of the template",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Accommodation changes",
                        "name": "Changes",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/V1.Request.PatchVenueAccommodation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.PatchVenueAccommodation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Invalid"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/V1.Response.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "V1.Request.CreateAccommodationVenueTemplate": {
            "type": "object",
            "required": [
                "description",
                "name",
                "occupancy",
                "type"
            ],
            "properties": {
                "description": {
                    "description": "Description of the accommodation that this applies to.",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the template.",
                    "type": "string",
                    "minLength": 3
                },
                "occupancy": {
                    "$ref": "#/definitions/V1.Request[Model].VenueAccommodationTemplateOccupancyCreate"
                },
                "type": {
                    "description": "The type of accommodation that this template is for.\nCurrently only supports 'room'",
                    "type": "string",
                    "enum": [
                        "room"
                    ]
                }
            }
        },
        "V1.Request.CreateOrganisation": {
            "type": "object",
            "required": [
                "name",
                "slug"
            ],
            "properties": {
                "name": {
                    "description": "The name of the organisation.",
                    "type": "string",
                    "minLength": 3
                },
                "slug": {
                    "description": "A slug that will be used in URI's.\nMust only contain alphanumeric and hyphen characters",
                    "type": "string",
                    "minLength": 3
                }
            }
        },
        "V1.Request.CreateVenue": {
            "type": "object",
            "required": [
                "address",
                "name",
                "slug",
                "type"
            ],
            "properties": {
                "address": {
                    "description": "The address of the venue.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/V1.Request[Model].VenueAddressCreate"
                        }
                    ]
                },
                "name": {
                    "description": "The name of the venue.",
                    "type": "string",
                    "minLength": 3
                },
                "slug": {
                    "description": "The slug of the venue, used in URI's.\nMust only contain alphanumeric and hyphen characters.\nMust be unique within the organisation.",
                    "type": "string",
                    "minLength": 3
                },
                "type": {
                    "description": "The type of venue.\nCurrently only supports 'hotel'",
                    "type": "string",
                    "enum": [
                        "hotel"
                    ]
                }
            }
        },
        "V1.Request.CreateVenueAccommodation": {
            "type": "object",
            "required": [
                "description",
                "name",
                "occupancy",
                "reference",
                "type"
            ],
            "properties": {
                "description": {
                    "description": "Description of the accommodation that this applies to.\nOr null if venue_template_id is supplied.",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the template.\nOr null if venue_template_id is supplied.",
                    "type": "string",
                    "minLength": 3,
                    "x-nullable": true
                },
                "occupancy": {
                    "$ref": "#/definitions/V1.Request[Model].VenueAccommodationOccupancyCreate"
                },
                "reference": {
                    "description": "A reference for this accommodation.",
                    "type": "string",
                    "minLength": 3
                },
                "type": {
                    "description": "The type of accommodation that this template is for.\nCurrently only supports 'room'.\nOr null if venue_template_id is supplied.",
                    "type": "string",
                    "enum": [
                        "room"
                    ],
                    "x-nullable": true
                },
                "venue_template_id": {
                    "type": "string"
                }
            }
        },
        "V1.Request.PatchVenueAccommodation": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description of the accommodation that this applies to.\nOr null to remove this setting and use the templates value.",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "description": "The name of the template.\nOr null to remove this setting and use the templates value.",
                    "type": "string",
                    "minLength": 3,
                    "x-nullable": true
                },
                "occupancy": {
                    "$ref": "#/definitions/V1.Request[Model].VenueAccommodationOccupancyUpdate"
                },
                "reference": {
                    "description": "A reference for this accommodation.",
                    "type": "string",
                    "minLength": 3
                },
                "type": {
                    "description": "The type of accommodation that this template is for.\nCurrently only supports 'room'.\nOr null to remove this setting and use the templates value.",
                    "type": "string",
                    "enum": [
                        "room"
                    ],
                    "x-nullable": true
                },
                "venue_template_id": {
                    "type": "string",
                    "x-nullable": true
                }
            }
        },
        "V1.Request.UpdateAccommodationVenueTemplate": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description of the accommodation that this applies to.",
                    "type": "string",
                    "minLength": 10,
                    "x-nullable": true
                },
                "name": {
                    "description": "The name of the template.",
                    "type": "string",
                    "minLength": 3,
                    "x-nullable": true
                },
                "occupancy": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/V1.Request[Model].VenueAccommodationTemplateOccupancyUpdate"
                        }
                    ],
                    "x-nullable": true
                },
                "type": {
                    "description": "The type of accommodation that this template is for.\nCurrently only supports 'room'",
                    "type": "string",
                    "enum": [
                        "room"
                    ],
                    "x-nullable": true
                }
            }
        },
        "V1.Request.UpdateOrganisation": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the organisation.",
                    "type": "string",
                    "minLength": 3,
                    "x-nullable": true
                },
                "slug": {
                    "description": "A slug that will be used in URI's.\nMust only contain alphanumeric and hyphen characters.\nMust be unique across all other organisations.",
                    "type": "string",
                    "minLength": 3,
                    "x-nullable": true
                }
            }
        },
        "V1.Request.UpdateVenue": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "The address of the venue.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/V1.Request[Model].VenueAddressUpdate"
                        }
                    ],
                    "x-nullable": true
                },
                "name": {
                    "description": "The name of the venue.",
                    "type": "string",
                    "minLength": 3,
                    "x-nullable": true
                },
                "slug": {
                    "description": "The slug of the venue, used in URI's.\nMust only contain alphanumeric and hyphen characters.\nMust be unique within the organisation.",
                    "type": "string",
                    "minLength": 3,
                    "x-nullable": true
                },
                "type": {
                    "description": "The type of venue.\nCurrently only supports 'hotel'",
                    "type": "string",
                    "enum": [
                        "hotel"
                    ],
                    "x-nullable": true
                }
            }
        },
        "V1.Request[Model].VenueAccommodationOccupancyCreate": {
            "type": "object",
            "required": [
                "min"
            ],
            "properties": {
                "max": {
                    "description": "The maximum amount of people that must occupy the accommodation.\nIf null or blank there will be no limit, or it will use the templates value.\nIf provided, it must be greater than the min occupancy.",
                    "type": "integer",
                    "minimum": 1,
                    "x-nullable": true
                },
                "min": {
                    "description": "The minimum amount of people that must occupy the accommodation.\nOr null if venue_template_id is supplied.",
                    "type": "integer",
                    "minimum": 1,
                    "x-nullable": true
                }
            }
        },
        "V1.Request[Model].VenueAccommodationOccupancyUpdate": {
            "type": "object",
            "properties": {
                "max": {
                    "description": "The maximum amount of people that must occupy the accommodation.\nIf null or blank there will be no limit, or it will use the templates value.",
                    "type": "integer",
                    "minimum": 1,
                    "x-nullable": true
                },
                "min": {
                    "description": "The minimum amount of people that must occupy the accommodation.\nOr null to remove this setting and use the templates value.",
                    "type": "integer",
                    "minimum": 1,
                    "x-nullable": true
                }
            }
        },
        "V1.Request[Model].VenueAccommodationTemplateOccupancyCreate": {
            "type": "object",
            "required": [
                "max",
                "min"
            ],
            "properties": {
                "max": {
                    "description": "The maximum amount of people that must occupy the accommodation.\nIf null or blank there will be no limit.\nIf provided, it must be greater than the min occupancy.",
                    "type": "integer",
                    "minimum": 1
                },
                "min": {
                    "description": "The minimum amount of people that must occupy the accommodation.",
                    "type": "integer",
                    "minimum": 1
                }
            }
        },
        "V1.Request[Model].VenueAccommodationTemplateOccupancyUpdate": {
            "type": "object",
            "properties": {
                "max": {
                    "description": "The maximum amount of people that must occupy the accommodation.\nIf null or blank there will be no limit.\nIf provided, it must be greater than the min occupancy.",
                    "type": "integer",
                    "minimum": 1,
                    "x-nullable": true
                },
                "min": {
                    "description": "The minimum amount of people that must occupy the accommodation.",
                    "type": "integer",
                    "minimum": 1,
                    "x-nullable": true
                }
            }
        },
        "V1.Request[Model].VenueAddressCreate": {
            "type": "object",
            "required": [
                "lat",
                "line_1",
                "long",
                "municipality",
                "postcode"
            ],
            "properties": {
                "lat": {
                    "description": "Latitude of the venue.",
                    "type": "number",
                    "minimum": 0
                },
                "line_1": {
                    "description": "Line 1 of the address, typically number/name and street.",
                    "type": "string",
                    "minLength": 1
                },
                "line_2": {
                    "description": "Line 2, extra information for the address if needed, optional.",
                    "type": "string",
                    "minLength": 1,
                    "x-nullable": true
                },
                "long": {
                    "description": "Longitude of the venue.",
                    "type": "number",
                    "minimum": 0
                },
                "municipality": {
                    "description": "The town/city/village that the venue is in.",
                    "type": "string",
                    "minLength": 1
                },
                "postcode": {
                    "description": "A valid UK postcode, following standard formats.",
                    "type": "string"
                }
            }
        },
        "V1.Request[Model].VenueAddressUpdate": {
            "description": "The changes to apply to the venue. Only include fields to change.",
            "type": "object",
            "properties": {
                "lat": {
                    "description": "Latitude of the venue.",
                    "type": "number",
                    "minimum": 0,
                    "x-nullable": true
                },
                "line_1": {
                    "description": "Line 1 of the address, typically number/name and street.",
                    "type": "string",
                    "minLength": 1,
                    "x-nullable": true
                },
                "line_2": {
                    "description": "Line 2, extra information for the address if needed, optional.",
                    "type": "string",
                    "minLength": 1,
                    "x-nullable": true
                },
                "long": {
                    "description": "Longitude of the venue.",
                    "type": "number",
                    "minimum": 0,
                    "x-nullable": true
                },
                "municipality": {
                    "description": "The town/city/village that the venue is in.",
                    "type": "string",
                    "minLength": 1,
                    "x-nullable": true
                },
                "postcode": {
                    "description": "A valid UK postcode, following standard formats.",
                    "type": "string",
                    "x-nullable": true
                }
            }
        },
        "V1.Response.CreateOrganisation": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/V1.Response[Model].Organisation"
                }
            }
        },
        "V1.Response.Error": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "An error message that may give you indication of the problem.",
                    "type": "string"
                }
            }
        },
        "V1.Response.GetOrganisation": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/V1.Response[Model].Organisation"
                }
            }
        },
        "V1.Response.GetVenueAccommodation": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/V1.Response[Model].VenueAccommodation"
                }
            }
        },
        "V1.Response.GetVenueAccommodationTemplate": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/V1.Response[Model].VenueAccommodationTemplate"
                }
            }
        },
        "V1.Response.Invalid": {
            "type": "object",
            "properties": {
                "errors": {
                    "description": "A KV map of errors during validation.\nThe keys in the map correspond to the fields in the request.\nThe keys are using dot notation to flatten any nested fields.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "V1.Response.ListMunicipalities": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/V1.Response[Model].Municipality"
                    }
                },
                "meta": {
                    "$ref": "#/definitions/V1.Response[Meta].List"
                }
            }
        },
        "V1.Response.ListOrganisations": {
            "type": "object",
            "properties": {
                "body": {
                    "$ref": "#/definitions/github_com_adamkirk-stayaway_organisations_internal_api_v1_responses.ListOrganisationsResponseBody"
                }
            }
        },
        "V1.Response.ListVenueAccommodationTemplates": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/V1.Response[Model].VenueAccommodationTemplate"
                    }
                },
                "meta": {
                    "$ref": "#/definitions/V1.Response[Meta].List"
                }
            }
        },
        "V1.Response.ListVenueAccommodations": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/V1.Response[Model].VenueAccommodation"
                    }
                },
                "meta": {
                    "$ref": "#/definitions/V1.Response[Meta].List"
                }
            }
        },
        "V1.Response.ListVenues": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/V1.Response[Model].Venue"
                    }
                },
                "meta": {
                    "$ref": "#/definitions/V1.Response[Meta].List"
                }
            }
        },
        "V1.Response.PatchOrganisation": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/V1.Response[Model].Organisation"
                }
            }
        },
        "V1.Response.PatchVenue": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/V1.Response[Model].Venue"
                }
            }
        },
        "V1.Response.PatchVenueAccommodation": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/V1.Response[Model].VenueAccommodation"
                }
            }
        },
        "V1.Response.PatchVenueAccommodationTemplate": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/V1.Response[Model].VenueAccommodationTemplate"
                }
            }
        },
        "V1.Response.PostVenue": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/V1.Response[Model].Venue"
                }
            }
        },
        "V1.Response.PostVenueAccommodation": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/V1.Response[Model].VenueAccommodation"
                }
            }
        },
        "V1.Response.PostVenueAccommodationTemplate": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/V1.Response[Model].VenueAccommodationTemplate"
                }
            }
        },
        "V1.Response[Meta].List": {
            "type": "object",
            "properties": {
                "pagination": {
                    "$ref": "#/definitions/V1.Response[Meta].Pagination"
                },
                "sorting": {
                    "$ref": "#/definitions/V1.Response[Meta].SortOptions"
                }
            }
        },
        "V1.Response[Meta].Pagination": {
            "type": "object",
            "properties": {
                "page": {
                    "description": "The page number for the results returned.",
                    "type": "integer"
                },
                "per_page": {
                    "description": "The amount of results oer page.",
                    "type": "integer"
                },
                "total_pages": {
                    "description": "The total amount of pages available with the value for per_page.",
                    "type": "integer"
                },
                "total_results": {
                    "description": "The total amount of results in the system.",
                    "type": "integer"
                }
            }
        },
        "V1.Response[Meta].SortOptions": {
            "type": "object",
            "properties": {
                "order_by": {
                    "description": "Field by which the results are sorted.",
                    "type": "string"
                },
                "order_dir": {
                    "description": "Direction that was used when sorting results.",
                    "type": "string"
                }
            }
        },
        "V1.Response[Model].Municipality": {
            "type": "object",
            "properties": {
                "country": {
                    "description": "The country in which the municipality resides.",
                    "type": "string"
                },
                "id": {
                    "description": "The ID of the municipality.",
                    "type": "string"
                },
                "iso3": {
                    "description": "ISO code for the country.",
                    "type": "string"
                },
                "lat": {
                    "description": "The latitude of the municipality.",
                    "type": "number"
                },
                "long": {
                    "description": "The longitude of the municipality.",
                    "type": "number"
                },
                "name": {
                    "description": "The \"common name\" of the town/city/village.",
                    "type": "string"
                },
                "name_ascii": {
                    "description": "An ascii friendly representation of the name.",
                    "type": "string"
                }
            }
        },
        "V1.Response[Model].Organisation": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "ID of the organisation.",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the organisation.",
                    "type": "string"
                },
                "slug": {
                    "description": "Unique slug used in URI's.",
                    "type": "string"
                }
            }
        },
        "V1.Response[Model].Venue": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "The address of the venue.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/V1.Response[Model].VenueAddress"
                        }
                    ]
                },
                "id": {
                    "description": "The ID of the venue.",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the venue.",
                    "type": "string"
                },
                "organisation_id": {
                    "description": "The ID of the organisation that this venue is a part of.",
                    "type": "string"
                },
                "slug": {
                    "description": "Slug used in URI's. Unique across all venues in the organisation.",
                    "type": "string"
                },
                "type": {
                    "description": "The type of venue this is.\nCurrently only 'hotel' is supported.",
                    "type": "string"
                }
            }
        },
        "V1.Response[Model].VenueAccommodation": {
            "type": "object",
            "properties": {
                "config": {
                    "description": "The final configuration used by the accommodation. This is the result of\nmerging any configuration from the template and the overrides of this\naccommodation. If there was no template, this is identical to the overrides.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/V1.Response[Model].VenueAccommodationConfig"
                        }
                    ]
                },
                "id": {
                    "description": "The ID of the template.",
                    "type": "string"
                },
                "overrides": {
                    "description": "The overrides that were supplied upon creation. These may all be set, or may\nall be null. They may only be null if the accommodation uses a template.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/V1.Response[Model].VenueAccommodationOverrides"
                        }
                    ]
                },
                "reference": {
                    "type": "string"
                },
                "venue_id": {
                    "description": "The ID of the venue this template exists in.",
                    "type": "string"
                },
                "venue_template_id": {
                    "description": "The ID of the venue template used by this accommodation.",
                    "type": "string"
                }
            }
        },
        "V1.Response[Model].VenueAccommodationConfig": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "occupancy": {
                    "$ref": "#/definitions/V1.Response[Model].VenueAccommodationOccupancy"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "V1.Response[Model].VenueAccommodationOccupancy": {
            "type": "object",
            "properties": {
                "max": {
                    "description": "The maximum occupancy for any templates using this template.\nNull means there is no maximum.",
                    "type": "integer"
                },
                "min": {
                    "description": "The minimum occupancy for any templates using this template.",
                    "type": "integer"
                }
            }
        },
        "V1.Response[Model].VenueAccommodationOccupancyOverrides": {
            "type": "object",
            "properties": {
                "max": {
                    "description": "The maximum occupancy for any templates using this template.\nNull means there is no maximum.",
                    "type": "integer"
                },
                "min": {
                    "description": "The minimum occupancy for any templates using this template.\nCan be null if the accommodation has a template.",
                    "type": "integer"
                }
            }
        },
        "V1.Response[Model].VenueAccommodationOverrides": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "occupancy": {
                    "$ref": "#/definitions/V1.Response[Model].VenueAccommodationOccupancyOverrides"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "V1.Response[Model].VenueAccommodationTemplate": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "A description about the accommodation.",
                    "type": "string"
                },
                "id": {
                    "description": "The ID of the template.",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the template.",
                    "type": "string"
                },
                "occupancy": {
                    "description": "The settings for occupancy.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/V1.Response[Model].VenueAccommodationTemplateOccupancy"
                        }
                    ]
                },
                "type": {
                    "description": "The type of accommodation this is.\nCurrently only 'room' is supported.",
                    "type": "string"
                },
                "venue_id": {
                    "description": "The ID of the venue this template exists in.",
                    "type": "string"
                }
            }
        },
        "V1.Response[Model].VenueAccommodationTemplateOccupancy": {
            "type": "object",
            "properties": {
                "max": {
                    "description": "The maximum occupancy for any templates using this template.\nNull means there is no maximum.",
                    "type": "integer"
                },
                "min": {
                    "description": "The minimum occupancy for any templates using this template.",
                    "type": "integer"
                }
            }
        },
        "V1.Response[Model].VenueAddress": {
            "type": "object",
            "properties": {
                "lat": {
                    "description": "The latitude of the venue.",
                    "type": "number"
                },
                "line_1": {
                    "description": "Line 1 of the address. Typically number/name and street/road.",
                    "type": "string"
                },
                "line_2": {
                    "description": "Line 2 of the address. May be null.",
                    "type": "string"
                },
                "long": {
                    "description": "The longiitude of the venue.",
                    "type": "number"
                },
                "municipality": {
                    "description": "The town/city in which the venue is situated.",
                    "type": "string"
                },
                "postcode": {
                    "description": "The postcode of the venue.",
                    "type": "string"
                }
            }
        },
        "github_com_adamkirk-stayaway_organisations_internal_api_v1_responses.ListOrganisationsResponseBody": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/V1.Response[Model].Organisation"
                    }
                },
                "meta": {
                    "$ref": "#/definitions/V1.Response[Meta].List"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "organisations.stayaway.test",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Stayaway - Organisations",
	Description:      "This is an API for managing organisations in the stayaway ecosystem.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
