// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	validation "github.com/adamkirk-stayaway/organisations/pkg/validation"
	mock "github.com/stretchr/testify/mock"
)

// MockCacher is an autogenerated mock type for the Cacher type
type MockCacher struct {
	mock.Mock
}

type MockCacher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCacher) EXPECT() *MockCacher_Expecter {
	return &MockCacher_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: key, meta
func (_m *MockCacher) Add(key string, meta validation.StructMapMeta) {
	_m.Called(key, meta)
}

// MockCacher_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockCacher_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - key string
//   - meta validation.StructMapMeta
func (_e *MockCacher_Expecter) Add(key interface{}, meta interface{}) *MockCacher_Add_Call {
	return &MockCacher_Add_Call{Call: _e.mock.On("Add", key, meta)}
}

func (_c *MockCacher_Add_Call) Run(run func(key string, meta validation.StructMapMeta)) *MockCacher_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(validation.StructMapMeta))
	})
	return _c
}

func (_c *MockCacher_Add_Call) Return() *MockCacher_Add_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCacher_Add_Call) RunAndReturn(run func(string, validation.StructMapMeta)) *MockCacher_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: key
func (_m *MockCacher) Get(key string) (validation.StructMapMeta, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 validation.StructMapMeta
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (validation.StructMapMeta, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) validation.StructMapMeta); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(validation.StructMapMeta)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockCacher_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCacher_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *MockCacher_Expecter) Get(key interface{}) *MockCacher_Get_Call {
	return &MockCacher_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *MockCacher_Get_Call) Run(run func(key string)) *MockCacher_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCacher_Get_Call) Return(_a0 validation.StructMapMeta, _a1 bool) *MockCacher_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCacher_Get_Call) RunAndReturn(run func(string) (validation.StructMapMeta, bool)) *MockCacher_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCacher creates a new instance of MockCacher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCacher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCacher {
	mock := &MockCacher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
